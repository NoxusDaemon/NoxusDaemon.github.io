{"version":3,"sources":["Components/Game/Scene.tsx","Components/Game/ShowAxis.ts","Components/Game/GameView.tsx","Components/Game/GameContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Scene","engine","canvas","onResizeWindow","resize","onCanvasLoaded","c","this","BABYLON","props","engineOptions","adaptToDeviceRatio","scene","onSceneMount","console","error","window","addEventListener","removeEventListener","canvasOptions","ref","React","Component","showAxis","size","makeTextPlane","text","color","dynamicTexture","hasAlpha","drawText","plane","CreatePlane","mMaterial","backFaceCulling","specularColor","diffuseTexture","material","CreateLines","Zero","position","GameView","e","camera","Vector3","attachControl","keysUp","push","keysDown","keysLeft","keysRight","intensity","redMaterial","diffuseColor","redSphere","CreateSphere","diameter","prope","prope2","drone","blueMaterial","ImportMesh","result","getBoundingInfo","boundingBox","center","add","setTarget","propes","tprope","clone","removeMesh","CreateGround","preTime","Date","getTime","delay","registerBeforeRender","getTarget","log","registerAfterRender","curTime","document","body","onkeyup","event","keyCode","rotate","runRenderLoop","render","style","width","height","what","by","GameContainer","App","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAyEeA,G,gNApDLC,Y,IACAC,Y,IAEDC,eAAiB,WAClB,EAAKF,QACP,EAAKA,OAAOG,U,EAiCTC,eAAiB,SAACC,GACb,OAANA,IACF,EAAKJ,OAASI,I,mFA9BhBC,KAAKN,OAAS,IAAIO,SAChBD,KAAKL,QACL,EACAK,KAAKE,MAAMC,cACXH,KAAKE,MAAME,oBAGb,IAAMC,EAAQ,IAAIJ,QAAcD,KAAKN,QAEjCM,KAAKE,MAAMI,aACbN,KAAKE,MAAMI,aAAa,CACtBX,OAAQK,KAAKL,OACbD,OAAQM,KAAKN,OACbW,UAIFE,QAAQC,MAAM,uCAIhBC,OAAOC,iBAAiB,SAAUV,KAAKJ,kB,6CAIvCa,OAAOE,oBAAoB,SAAUX,KAAKJ,kB,+BAa1C,OAAO,4CAAYI,KAAKE,MAAMU,cAAvB,CAAsCC,IAAKb,KAAKF,sB,GAjDvCgB,IAAMC,YC+FXC,EAlHS,SAACC,EAAcZ,GAErC,IAAMa,EAAgB,SAACC,EAAcC,EAAeH,GAClD,IAAMI,EAAiB,IAAIpB,iBAAuB,iBAAkB,GAAII,GAAO,GAC/EgB,EAAeC,UAAW,EAC1BD,EAAeE,SAASJ,EAAM,EAAG,GAAI,kBAAmBC,EAAO,eAAe,GAC9E,IAAMI,EAAQvB,OAAawB,YAAY,YAAaR,EAAMZ,GAAO,GAC3DqB,EAAY,IAAIzB,mBAAyB,oBAAqBI,GAKpE,OAJAqB,EAAUC,iBAAkB,EAC5BD,EAAUE,cAAgB,IAAI3B,SAAe,EAAG,EAAG,GACnDyB,EAAUG,eAAiBR,EAC3BG,EAAMM,SAAWJ,EACVF,GAGKvB,OAAa8B,YACzB,QACA,CACE9B,UAAgB+B,OAChB,IAAI/B,UAAgBgB,EAAM,EAAG,GAC7B,IAAIhB,UAAuB,IAAPgB,EAAa,IAAOA,EAAM,GAC9C,IAAIhB,UAAgBgB,EAAM,EAAG,GAC7B,IAAIhB,UAAuB,IAAPgB,GAAc,IAAOA,EAAM,IAEjDZ,GAEIe,MAAQ,IAAInB,SAAe,EAAG,EAAG,GACzBiB,EAAc,IAAK,MAAOD,EAAO,IACzCgB,SAAW,IAAIhC,UAAgB,GAAMgB,GAAO,IAAOA,EAAM,GACjDhB,OAAa8B,YACzB,QACA,CACE9B,UAAgB+B,OAChB,IAAI/B,UAAgB,EAAGgB,EAAM,GAC7B,IAAIhB,WAAiB,IAAOgB,EAAa,IAAPA,EAAa,GAC/C,IAAIhB,UAAgB,EAAGgB,EAAM,GAC7B,IAAIhB,UAAgB,IAAOgB,EAAa,IAAPA,EAAa,IAEhDZ,GAEIe,MAAQ,IAAInB,SAAe,EAAG,EAAG,GACzBiB,EAAc,IAAK,QAASD,EAAO,IAC3CgB,SAAW,IAAIhC,UAAgB,EAAG,GAAMgB,GAAO,IAAOA,GAC9ChB,OAAa8B,YACzB,QACA,CACE9B,UAAgB+B,OAChB,IAAI/B,UAAgB,EAAG,EAAGgB,GAC1B,IAAIhB,UAAgB,GAAI,IAAOgB,EAAa,IAAPA,GACrC,IAAIhB,UAAgB,EAAG,EAAGgB,GAC1B,IAAIhB,UAAgB,EAAG,IAAOgB,EAAa,IAAPA,IAEtCZ,GAEIe,MAAQ,IAAInB,SAAe,EAAG,EAAG,GACzBiB,EAAc,IAAK,OAAQD,EAAO,IAC1CgB,SAAW,IAAIhC,UAAgB,EAAG,IAAOgB,EAAM,GAAMA,ICjDvDiB,E,2MACG5B,aAAe,SAAC6B,GAAwB,IACrCxC,EAA0BwC,EAA1BxC,OAAQU,EAAkB8B,EAAlB9B,MAAOX,EAAWyC,EAAXzC,OAGjB0C,EAAS,IAAInC,aAAmB,UAAW,IAAIoC,UAAQ,EAAG,EAAG,GAAIhC,GAGvE+B,EAAOE,cAAc3C,GAAQ,GAC7ByC,EAAOG,OAAOC,KAAK,IACnBJ,EAAOK,SAASD,KAAK,IACrBJ,EAAOM,SAASF,KAAK,IACrBJ,EAAOO,UAAUH,KAAK,IAGR,IAAIvC,mBAAyB,SAAU,IAAIoC,UAAQ,EAAG,EAAG,GAAIhC,GAGrEuC,UAAY,GAElB5B,EAAS,EAAGX,GACZ,IAAMwC,EAAc,IAAI5C,mBAAyB,cAAeI,GAChEwC,EAAYC,aAAe,IAAI7C,SAAe,EAAG,EAAG,GACpD4C,EAAYjB,cAAgB,IAAI3B,SAAe,EAAG,EAAG,GACrD,IAAM8C,EAAY9C,cAAoB+C,aAAa,aAAc,CAAEC,SAAU,IAAO5C,GACpF0C,EAAUjB,SAAWe,EACrBE,EAAUd,SAAW,IAAII,UAAQ,SAAW,WAAY,UAExD,IAKIa,EACAC,EACAC,EAPEC,EAAe,IAAIpD,mBAAyB,eAAgBI,GAClEgD,EAAaP,aAAe,IAAI7C,SAAe,EAAG,EAAG,GACrDoD,EAAazB,cAAgB,IAAI3B,SAAe,EAAG,EAAG,GACnCA,cAAoB+C,aAAa,cAAe,CAAEC,SAAU,IAAO5C,GAC3EyB,SAAWuB,EAItBpD,cAAoBqD,WAClB,CAAC,QAAS,wBAAyB,wBACnC,WACA,YACAjD,EACA,SAAAkD,GAEEH,EADiBG,EAEjBnB,EAAOH,SAAWmB,EAAM,GACrBI,kBACAC,YAAYC,OAAOC,IAAI,IAAI1D,WAAiB,EAAG,EAAG,IACrDmC,EAAOwB,UAAU,IAAI3D,UAAgB,EAAG,EAAG,IAE3CA,cAAoBqD,WAAW,CAAC,UAAW,WAAY,YAAajD,EAAO,SAAAwD,GACzE,IAAMC,EAAcD,EAAO,GAC3BX,EAAQY,EAAOC,MAAM,SAAUX,EAAM,IACrCD,EAASW,EAAOC,MAAM,SAAUX,EAAM,IACtCF,EAAMjB,SAAWmB,EAAM,GAAGI,kBAAkBC,YAAYC,OACxDP,EAAOlB,SAAWmB,EAAM,GAAGI,kBAAkBC,YAAYC,OACzDrD,EAAM2D,WAAWF,GACjBzD,EAAM2D,WAAWZ,EAAM,IACvB/C,EAAM2D,WAAWZ,EAAM,QAM7BnD,OAAagE,aAAa,UAAW,EAAG,EAAG,EAAG5D,GAE9C,IAAI6D,GAAU,IAAIC,MAAOC,UACrBC,EAAQ,IAAO,GACnBhE,EAAMiE,qBAAqB,WACrBlB,IACFA,EAAM,GAAGnB,SAAWG,EACjBmC,YACAR,QACAJ,IAAI,IAAI1D,UAAgB,GAAI,EAAG,IAClCM,QAAQiE,IAAIpB,EAAM,GAAGnB,aAGzB5B,EAAMoE,oBAAoB,WACxB,IAAMC,GAAU,IAAIP,MAAOC,UACvBM,EAAUR,EAAUG,GAASjB,IAC/BuB,SAASC,KAAKC,QAAU,SAAAC,GACA,KAAlBA,EAAMC,UAENV,EADEA,IAAU,IAAO,GACX,IAEA,IAAO,KASrB9D,QAAQiE,IAAIpB,EAAM,GAAGnB,UACrB+C,EAAO9B,GAAQ,IACf8B,EAAO7B,EAAQ,IAKfe,EAAUQ,KAIdhF,EAAOuF,cAAc,WACf5E,GACFA,EAAM6E,Y,wEAKV,OACE,kBAAC,EAAD,CACE5E,aAAcN,KAAKM,aACnBM,cAAe,CAAEuE,MAAO,CAAEC,MAAO,OAAQC,OAAQ,e,GAlHlCvE,IAAMC,WAuHvBiE,EAAS,SAACM,EAAYC,GACtBD,GACFA,EAAKN,OAAO,IAAI/E,UAAgB,EAAG,EAAG,GAAIsF,IAG/BrD,IC/HAsD,EAHiB,WAC9B,OAAO,kBAAC,EAAD,OCKMC,EAJO,WACpB,OAAO,kBAAC,EAAD,O,MCQWC,QACW,cAA7BjF,OAAOkF,SAASC,UAEe,UAA7BnF,OAAOkF,SAASC,UAEhBnF,OAAOkF,SAASC,SAASC,MAAM,2DCZnCC,IAASZ,OAAO,kBAAC,EAAD,MAASP,SAASoB,eAAe,SDgI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.46e20914.chunk.js","sourcesContent":["import * as BABYLON from \"babylonjs\";\r\nimport \"babylonjs-loaders\";\r\nimport React from \"react\";\r\n\r\nexport interface ISceneEventArgs {\r\n  engine: BABYLON.Engine;\r\n  scene: BABYLON.Scene;\r\n  canvas: HTMLCanvasElement;\r\n}\r\n\r\nexport type ISceneProps = {\r\n  engineOptions?: BABYLON.EngineOptions;\r\n  adaptToDeviceRatio?: boolean;\r\n  onSceneMount?: (args: ISceneEventArgs) => void;\r\n  canvasOptions: React.DetailedHTMLProps<\r\n    React.CanvasHTMLAttributes<HTMLCanvasElement>,\r\n    HTMLCanvasElement\r\n  >;\r\n} & React.HTMLAttributes<HTMLCanvasElement>;\r\n\r\nclass Scene extends React.Component<ISceneProps, {}> {\r\n  private engine: BABYLON.Engine | undefined;\r\n  private canvas: HTMLCanvasElement | undefined;\r\n\r\n  public onResizeWindow = () => {\r\n    if (this.engine) {\r\n      this.engine.resize();\r\n    }\r\n  };\r\n\r\n  public componentDidMount() {\r\n    this.engine = new BABYLON.Engine(\r\n      this.canvas!,\r\n      true,\r\n      this.props.engineOptions,\r\n      this.props.adaptToDeviceRatio\r\n    );\r\n\r\n    const scene = new BABYLON.Scene(this.engine);\r\n\r\n    if (this.props.onSceneMount) {\r\n      this.props.onSceneMount({\r\n        canvas: this.canvas!,\r\n        engine: this.engine,\r\n        scene,\r\n      });\r\n    } else {\r\n      // tslint:disable-next-line: no-console\r\n      console.error(\"onSceneMount function not available\");\r\n    }\r\n\r\n    // Resize the babylon engine when the window is resized\r\n    window.addEventListener(\"resize\", this.onResizeWindow);\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.onResizeWindow);\r\n  }\r\n\r\n  public onCanvasLoaded = (c: HTMLCanvasElement) => {\r\n    if (c !== null) {\r\n      this.canvas = c;\r\n    }\r\n  };\r\n\r\n  public render() {\r\n    // 'rest' can contain additional properties that you can flow through to canvas:\r\n    // (id, className, etc.)\r\n\r\n    return <canvas {...this.props.canvasOptions} ref={this.onCanvasLoaded} />;\r\n  }\r\n}\r\n\r\nexport default Scene;\r\n","import * as BABYLON from \"babylonjs\";\r\nexport const showAxis = (size: number, scene: BABYLON.Scene) => {\r\n  // tslint:disable-next-line: no-shadowed-variable\r\n  const makeTextPlane = (text: string, color: string, size: number) => {\r\n    const dynamicTexture = new BABYLON.DynamicTexture(\"DynamicTexture\", 50, scene, true);\r\n    dynamicTexture.hasAlpha = true;\r\n    dynamicTexture.drawText(text, 5, 40, \"bold 36px Arial\", color, \"transparent\", true);\r\n    const plane = BABYLON.Mesh.CreatePlane(\"TextPlane\", size, scene, true);\r\n    const mMaterial = new BABYLON.StandardMaterial(\"TextPlaneMaterial\", scene);\r\n    mMaterial.backFaceCulling = false;\r\n    mMaterial.specularColor = new BABYLON.Color3(0, 0, 0);\r\n    mMaterial.diffuseTexture = dynamicTexture;\r\n    plane.material = mMaterial;\r\n    return plane;\r\n  };\r\n\r\n  const axisX = BABYLON.Mesh.CreateLines(\r\n    \"axisX\",\r\n    [\r\n      BABYLON.Vector3.Zero(),\r\n      new BABYLON.Vector3(size, 0, 0),\r\n      new BABYLON.Vector3(size * 0.95, 0.05 * size, 0),\r\n      new BABYLON.Vector3(size, 0, 0),\r\n      new BABYLON.Vector3(size * 0.95, -0.05 * size, 0),\r\n    ],\r\n    scene\r\n  );\r\n  axisX.color = new BABYLON.Color3(1, 0, 0);\r\n  const xChar = makeTextPlane(\"X\", \"red\", size / 10);\r\n  xChar.position = new BABYLON.Vector3(0.9 * size, -0.05 * size, 0);\r\n  const axisY = BABYLON.Mesh.CreateLines(\r\n    \"axisY\",\r\n    [\r\n      BABYLON.Vector3.Zero(),\r\n      new BABYLON.Vector3(0, size, 0),\r\n      new BABYLON.Vector3(-0.05 * size, size * 0.95, 0),\r\n      new BABYLON.Vector3(0, size, 0),\r\n      new BABYLON.Vector3(0.05 * size, size * 0.95, 0),\r\n    ],\r\n    scene\r\n  );\r\n  axisY.color = new BABYLON.Color3(0, 1, 0);\r\n  const yChar = makeTextPlane(\"Y\", \"green\", size / 10);\r\n  yChar.position = new BABYLON.Vector3(0, 0.9 * size, -0.05 * size);\r\n  const axisZ = BABYLON.Mesh.CreateLines(\r\n    \"axisZ\",\r\n    [\r\n      BABYLON.Vector3.Zero(),\r\n      new BABYLON.Vector3(0, 0, size),\r\n      new BABYLON.Vector3(0, -0.05 * size, size * 0.95),\r\n      new BABYLON.Vector3(0, 0, size),\r\n      new BABYLON.Vector3(0, 0.05 * size, size * 0.95),\r\n    ],\r\n    scene\r\n  );\r\n  axisZ.color = new BABYLON.Color3(0, 0, 1);\r\n  const zChar = makeTextPlane(\"Z\", \"blue\", size / 10);\r\n  zChar.position = new BABYLON.Vector3(0, 0.05 * size, 0.9 * size);\r\n};\r\n\r\n// Local Axes\r\nexport const localAxes = (size: number, scene: BABYLON.Scene) => {\r\n  // tslint:disable-next-line: variable-name\r\n  const pilot_local_axisX = BABYLON.Mesh.CreateLines(\r\n    \"pilot_local_axisX\",\r\n    [\r\n      BABYLON.Vector3.Zero(),\r\n      new BABYLON.Vector3(size, 0, 0),\r\n      new BABYLON.Vector3(size * 0.95, 0.05 * size, 0),\r\n      new BABYLON.Vector3(size, 0, 0),\r\n      new BABYLON.Vector3(size * 0.95, -0.05 * size, 0),\r\n    ],\r\n    scene\r\n  );\r\n  pilot_local_axisX.color = new BABYLON.Color3(1, 0, 0);\r\n\r\n  // tslint:disable-next-line: variable-name\r\n  const pilot_local_axisY = BABYLON.Mesh.CreateLines(\r\n    \"pilot_local_axisY\",\r\n    [\r\n      BABYLON.Vector3.Zero(),\r\n      new BABYLON.Vector3(0, size, 0),\r\n      new BABYLON.Vector3(-0.05 * size, size * 0.95, 0),\r\n      new BABYLON.Vector3(0, size, 0),\r\n      new BABYLON.Vector3(0.05 * size, size * 0.95, 0),\r\n    ],\r\n    scene\r\n  );\r\n  pilot_local_axisY.color = new BABYLON.Color3(0, 1, 0);\r\n\r\n  // tslint:disable-next-line: variable-name\r\n  const pilot_local_axisZ = BABYLON.Mesh.CreateLines(\r\n    \"pilot_local_axisZ\",\r\n    [\r\n      BABYLON.Vector3.Zero(),\r\n      new BABYLON.Vector3(0, 0, size),\r\n      new BABYLON.Vector3(0, -0.05 * size, size * 0.95),\r\n      new BABYLON.Vector3(0, 0, size),\r\n      new BABYLON.Vector3(0, 0.05 * size, size * 0.95),\r\n    ],\r\n    scene\r\n  );\r\n  pilot_local_axisZ.color = new BABYLON.Color3(0, 0, 1);\r\n\r\n  // tslint:disable-next-line: variable-name\r\n  const local_origin = BABYLON.MeshBuilder.CreateBox(\"local_origin\", { size: 1 }, scene);\r\n  local_origin.isVisible = false;\r\n\r\n  pilot_local_axisX.parent = local_origin;\r\n  pilot_local_axisY.parent = local_origin;\r\n  pilot_local_axisZ.parent = local_origin;\r\n\r\n  return local_origin;\r\n};\r\n\r\nexport default showAxis;\r\n","import * as BABYLON from \"babylonjs\";\r\nimport { Mesh, Vector3 } from \"babylonjs\";\r\nimport \"babylonjs-loaders\";\r\nimport React from \"react\";\r\nimport Scene, { ISceneEventArgs } from \"./Scene\";\r\nimport showAxis from \"./ShowAxis\";\r\n\r\n// tslint:disable: no-console\r\nclass GameView extends React.Component {\r\n  public onSceneMount = (e: ISceneEventArgs) => {\r\n    const { canvas, scene, engine } = e;\r\n\r\n    // This creates and positions a free camera (non-mesh)\r\n    const camera = new BABYLON.FreeCamera(\"camera1\", new Vector3(0, 0, 0), scene);\r\n\r\n    // This attaches the camera to the canvas\r\n    camera.attachControl(canvas, true);\r\n    camera.keysUp.push(87);\r\n    camera.keysDown.push(83);\r\n    camera.keysLeft.push(65);\r\n    camera.keysRight.push(68);\r\n\r\n    // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\r\n    const light = new BABYLON.HemisphericLight(\"light1\", new Vector3(0, 1, 0), scene);\r\n\r\n    // Default intensity is 1. Let's dim the light a small amount\r\n    light.intensity = 0.7;\r\n\r\n    showAxis(4, scene);\r\n    const redMaterial = new BABYLON.StandardMaterial(\"redMaterial\", scene);\r\n    redMaterial.diffuseColor = new BABYLON.Color3(1, 0, 0);\r\n    redMaterial.specularColor = new BABYLON.Color3(0, 0, 0);\r\n    const redSphere = BABYLON.MeshBuilder.CreateSphere(\"redSphere1\", { diameter: 0.2 }, scene);\r\n    redSphere.material = redMaterial;\r\n    redSphere.position = new Vector3(0.4114965, 2.4016495, -0.9060635);\r\n\r\n    const blueMaterial = new BABYLON.StandardMaterial(\"blueMaterial\", scene);\r\n    blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1);\r\n    blueMaterial.specularColor = new BABYLON.Color3(0, 0, 0);\r\n    const blueSphere = BABYLON.MeshBuilder.CreateSphere(\"blueSphere1\", { diameter: 0.5 }, scene);\r\n    blueSphere.material = blueMaterial;\r\n    let prope: Mesh;\r\n    let prope2: Mesh;\r\n    let drone: Mesh[];\r\n    BABYLON.SceneLoader.ImportMesh(\r\n      [\"Drone\", \"Propllier_2_Drone.002\", \"propller_1_Drone.004\"],\r\n      \"/assets/\",\r\n      \"Drone.obj\",\r\n      scene,\r\n      result => {\r\n        const tmp: any = result;\r\n        drone = tmp;\r\n        camera.position = drone[0]\r\n          .getBoundingInfo()\r\n          .boundingBox.center.add(new BABYLON.Vector3(-2, 2, 0));\r\n        camera.setTarget(new BABYLON.Vector3(1, 2, 0));\r\n\r\n        BABYLON.SceneLoader.ImportMesh([\"prope1\"], \"/assets/\", \"prope.obj\", scene, propes => {\r\n          const tprope: any = propes[0];\r\n          prope = tprope.clone(\"prope1\", drone[0]);\r\n          prope2 = tprope.clone(\"prope2\", drone[0]);\r\n          prope.position = drone[2].getBoundingInfo().boundingBox.center;\r\n          prope2.position = drone[1].getBoundingInfo().boundingBox.center;\r\n          scene.removeMesh(tprope);\r\n          scene.removeMesh(drone[2]);\r\n          scene.removeMesh(drone[1]);\r\n        });\r\n      }\r\n    );\r\n\r\n    // Our built-in 'ground' shape. Params: name, width, depth, subdivs, scene\r\n    BABYLON.Mesh.CreateGround(\"ground1\", 6, 6, 2, scene);\r\n\r\n    let preTime = new Date().getTime();\r\n    let delay = 1000 / 60;\r\n    scene.registerBeforeRender(() => {\r\n      if (drone) {\r\n        drone[0].position = camera\r\n          .getTarget()\r\n          .clone()\r\n          .add(new BABYLON.Vector3(2, -5, 0));\r\n        console.log(drone[0].position);\r\n      }\r\n    });\r\n    scene.registerAfterRender(() => {\r\n      const curTime = new Date().getTime();\r\n      if (curTime - preTime > delay && drone) {\r\n        document.body.onkeyup = event => {\r\n          if (event.keyCode === 32) {\r\n            if (delay === 1000 / 60) {\r\n              delay = 10000;\r\n            } else {\r\n              delay = 1000 / 60;\r\n            }\r\n          }\r\n        };\r\n        // drone[0].position = camera\r\n        //   .getTarget()\r\n        //   .clone()\r\n        //   .add(new BABYLON.Vector3(2, -5, 0));\r\n        // drone[0].translate(Vector3.Right(), -0.1);\r\n        console.log(drone[0].position);\r\n        rotate(prope, -0.1);\r\n        rotate(prope2, 0.1);\r\n\r\n        // if (prope) {\r\n        //   blueSphere.position = drone[0].position.clone().add(prope.position.clone());\r\n        // }\r\n        preTime = curTime;\r\n      }\r\n    });\r\n    // BABYLON.SceneLoader.\r\n    engine.runRenderLoop(() => {\r\n      if (scene) {\r\n        scene.render();\r\n      }\r\n    });\r\n  };\r\n  public render() {\r\n    return (\r\n      <Scene\r\n        onSceneMount={this.onSceneMount}\r\n        canvasOptions={{ style: { width: \"100%\", height: \"100%\" } }}\r\n      />\r\n    );\r\n  }\r\n}\r\nconst rotate = (what: Mesh, by: number) => {\r\n  if (what) {\r\n    what.rotate(new BABYLON.Vector3(0, 1, 0), by);\r\n  }\r\n};\r\nexport default GameView;\r\n","import React from \"react\";\r\nimport GameView from \"./GameView\";\r\nconst GameContainer: React.FC = () => {\r\n  return <GameView />;\r\n};\r\nexport default GameContainer;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport GameContainer from \"./Components/Game/GameContainer\";\r\n\r\nconst App: React.FC = () => {\r\n  return <GameContainer />;\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\n// tslint:disable\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ninterface Config {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\"No internet connection found. App is running in offline mode.\");\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}