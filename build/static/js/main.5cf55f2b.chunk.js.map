{"version":3,"sources":["Components/Game/Scene.tsx","Components/Game/GameView.tsx","Components/Game/GameContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Scene","engine","canvas","onResizeWindow","resize","onCanvasLoaded","c","this","BABYLON","props","engineOptions","adaptToDeviceRatio","scene","onSceneMount","console","error","window","addEventListener","removeEventListener","canvasOptions","ref","React","Component","GameView","e","drone","camera","attachControl","intensity","ImportMesh","result","position","getBoundingInfo","boundingBox","center","add","setTarget","CreateGround","preTime","Date","getTime","runRenderLoop","render","curTime","rotate","style","width","height","what","by","rotateAround","GameContainer","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAyEeA,G,gNApDLC,Y,IACAC,Y,IAEDC,eAAiB,WAClB,EAAKF,QACP,EAAKA,OAAOG,U,EAiCTC,eAAiB,SAACC,GACb,OAANA,IACF,EAAKJ,OAASI,I,mFA9BhBC,KAAKN,OAAS,IAAIO,SAChBD,KAAKL,QACL,EACAK,KAAKE,MAAMC,cACXH,KAAKE,MAAME,oBAGb,IAAMC,EAAQ,IAAIJ,QAAcD,KAAKN,QAEjCM,KAAKE,MAAMI,aACbN,KAAKE,MAAMI,aAAa,CACtBX,OAAQK,KAAKL,OACbD,OAAQM,KAAKN,OACbW,UAIFE,QAAQC,MAAM,uCAIhBC,OAAOC,iBAAiB,SAAUV,KAAKJ,kB,6CAIvCa,OAAOE,oBAAoB,SAAUX,KAAKJ,kB,+BAa1C,OAAO,4CAAYI,KAAKE,MAAMU,cAAvB,CAAsCC,IAAKb,KAAKF,sB,GAjDvCgB,IAAMC,YCfpBC,E,2MACGV,aAAe,SAACW,GAAwB,IAezCC,EAdIvB,EAA0BsB,EAA1BtB,OAAQU,EAAkBY,EAAlBZ,MAAOX,EAAWuB,EAAXvB,OAGjByB,EAAS,IAAIlB,aAAmB,UAAW,IAAIA,UAAgB,EAAG,EAAG,GAAII,GAG/Ec,EAAOC,cAAczB,GAAQ,GAGf,IAAIM,mBAAyB,SAAU,IAAIA,UAAgB,EAAG,EAAG,GAAII,GAG7EgB,UAAY,GAGlBpB,cAAoBqB,WAClB,CAAC,QAAS,wBAAyB,wBACnC,WACA,YACAjB,EACA,SAAAkB,GACEL,EAAQK,EACRJ,EAAOK,SAAWN,EAAM,GACrBO,kBACAC,YAAYC,OAAOC,IAAI,IAAI3B,WAAiB,EAAG,EAAG,IACrDkB,EAAOU,UAAU,IAAI5B,UAAgB,EAAG,EAAG,MAK/CA,OAAa6B,aAAa,UAAW,EAAG,EAAG,EAAGzB,GAC9C,IAAI0B,GAAU,IAAIC,MAAOC,UAGzBvC,EAAOwC,cAAc,WACnB,GAAI7B,EAAO,CACTA,EAAM8B,SACN,IAAMC,GAAU,IAAIJ,MAAOC,UAGvBG,EAAUL,EARJ,IAAO,IAQgBb,IAC/BmB,EAAOnB,EAAM,GAAI,IACjBmB,EAAOnB,EAAM,GAAI,IACjBa,EAAUK,O,wEAMhB,OACE,kBAAC,EAAD,CACE9B,aAAcN,KAAKM,aACnBM,cAAe,CAAE0B,MAAO,CAAEC,MAAO,OAAQC,OAAQ,e,GAtDlC1B,IAAMC,WA2DvBsB,EAAS,SAACI,EAAoBC,GAClCD,EAAKE,aAAaF,EAAKhB,kBAAkBC,YAAYC,OAAQ,IAAI1B,UAAgB,EAAG,EAAG,GAAIyC,IAE9E1B,IC9DA4B,EAHiB,WAC9B,OAAO,kBAAC,EAAD,OCKMC,EAJO,WACpB,OAAO,kBAAC,EAAD,O,MCQWC,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASC,MAAM,2DCZnCC,IAASf,OAAO,kBAAC,EAAD,MAASgB,SAASC,eAAe,SDgI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5cf55f2b.chunk.js","sourcesContent":["import * as BABYLON from \"babylonjs\";\r\nimport \"babylonjs-loaders\";\r\nimport React from \"react\";\r\n\r\nexport interface ISceneEventArgs {\r\n  engine: BABYLON.Engine;\r\n  scene: BABYLON.Scene;\r\n  canvas: HTMLCanvasElement;\r\n}\r\n\r\nexport type ISceneProps = {\r\n  engineOptions?: BABYLON.EngineOptions;\r\n  adaptToDeviceRatio?: boolean;\r\n  onSceneMount?: (args: ISceneEventArgs) => void;\r\n  canvasOptions: React.DetailedHTMLProps<\r\n    React.CanvasHTMLAttributes<HTMLCanvasElement>,\r\n    HTMLCanvasElement\r\n  >;\r\n} & React.HTMLAttributes<HTMLCanvasElement>;\r\n\r\nclass Scene extends React.Component<ISceneProps, {}> {\r\n  private engine: BABYLON.Engine | undefined;\r\n  private canvas: HTMLCanvasElement | undefined;\r\n\r\n  public onResizeWindow = () => {\r\n    if (this.engine) {\r\n      this.engine.resize();\r\n    }\r\n  };\r\n\r\n  public componentDidMount() {\r\n    this.engine = new BABYLON.Engine(\r\n      this.canvas!,\r\n      true,\r\n      this.props.engineOptions,\r\n      this.props.adaptToDeviceRatio\r\n    );\r\n\r\n    const scene = new BABYLON.Scene(this.engine);\r\n\r\n    if (this.props.onSceneMount) {\r\n      this.props.onSceneMount({\r\n        canvas: this.canvas!,\r\n        engine: this.engine,\r\n        scene,\r\n      });\r\n    } else {\r\n      // tslint:disable-next-line: no-console\r\n      console.error(\"onSceneMount function not available\");\r\n    }\r\n\r\n    // Resize the babylon engine when the window is resized\r\n    window.addEventListener(\"resize\", this.onResizeWindow);\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.onResizeWindow);\r\n  }\r\n\r\n  public onCanvasLoaded = (c: HTMLCanvasElement) => {\r\n    if (c !== null) {\r\n      this.canvas = c;\r\n    }\r\n  };\r\n\r\n  public render() {\r\n    // 'rest' can contain additional properties that you can flow through to canvas:\r\n    // (id, className, etc.)\r\n\r\n    return <canvas {...this.props.canvasOptions} ref={this.onCanvasLoaded} />;\r\n  }\r\n}\r\n\r\nexport default Scene;\r\n","import * as BABYLON from \"babylonjs\";\r\nimport { AbstractMesh } from \"babylonjs\";\r\nimport \"babylonjs-loaders\";\r\nimport React from \"react\";\r\nimport Scene, { ISceneEventArgs } from \"./Scene\";\r\nclass GameView extends React.Component {\r\n  public onSceneMount = (e: ISceneEventArgs) => {\r\n    const { canvas, scene, engine } = e;\r\n\r\n    // This creates and positions a free camera (non-mesh)\r\n    const camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 0, 0), scene);\r\n\r\n    // This attaches the camera to the canvas\r\n    camera.attachControl(canvas, true);\r\n\r\n    // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\r\n    const light = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(0, 1, 0), scene);\r\n\r\n    // Default intensity is 1. Let's dim the light a small amount\r\n    light.intensity = 0.7;\r\n\r\n    let drone: BABYLON.AbstractMesh[];\r\n    BABYLON.SceneLoader.ImportMesh(\r\n      [\"Drone\", \"Propllier_2_Drone.002\", \"propller_1_Drone.004\"],\r\n      \"/assets/\",\r\n      \"Drone.obj\",\r\n      scene,\r\n      result => {\r\n        drone = result;\r\n        camera.position = drone[0]\r\n          .getBoundingInfo()\r\n          .boundingBox.center.add(new BABYLON.Vector3(-2, 2, 0));\r\n        camera.setTarget(new BABYLON.Vector3(1, 2, 0));\r\n      }\r\n    );\r\n\r\n    // Our built-in 'ground' shape. Params: name, width, depth, subdivs, scene\r\n    BABYLON.Mesh.CreateGround(\"ground1\", 6, 6, 2, scene);\r\n    let preTime = new Date().getTime();\r\n    const delay = 1000 / 60;\r\n    // BABYLON.SceneLoader.\r\n    engine.runRenderLoop(() => {\r\n      if (scene) {\r\n        scene.render();\r\n        const curTime = new Date().getTime();\r\n\r\n        // tslint:disable-next-line: no-console\r\n        if (curTime - preTime > delay && drone) {\r\n          rotate(drone[1], 0.1);\r\n          rotate(drone[2], 0.1);\r\n          preTime = curTime;\r\n        }\r\n      }\r\n    });\r\n  };\r\n  public render() {\r\n    return (\r\n      <Scene\r\n        onSceneMount={this.onSceneMount}\r\n        canvasOptions={{ style: { width: \"100%\", height: \"100%\" } }}\r\n      />\r\n    );\r\n  }\r\n}\r\nconst rotate = (what: AbstractMesh, by: number) => {\r\n  what.rotateAround(what.getBoundingInfo().boundingBox.center, new BABYLON.Vector3(0, 1, 0), by);\r\n};\r\nexport default GameView;\r\n","import React from \"react\";\r\nimport GameView from \"./GameView\";\r\nconst GameContainer: React.FC = () => {\r\n  return <GameView />;\r\n};\r\nexport default GameContainer;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport GameContainer from \"./Components/Game/GameContainer\";\r\n\r\nconst App: React.FC = () => {\r\n  return <GameContainer />;\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\n// tslint:disable\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ninterface Config {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\"No internet connection found. App is running in offline mode.\");\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}